{"version":3,"sources":["components/letter-avatar/letter-avatar.tsx","components/context/selected-contact.contexts.ts","components/contact-item/contact-item.tsx","queries/index.ts","components/icon-button/icon-button.tsx","react-auth0-spa.js","components/user-details/user-details.tsx","components/context/contacts.context.ts","components/sidebar/sidebar.tsx","components/contact-header/contact-header.tsx","components/contact-card/contact-card.tsx","helpers/index.ts","components/contact-form/contact-form.tsx","components/fab/fab.tsx","components/contact-area/contact-area.tsx","components/context/context-provider.tsx","components/context/contacts-context-provider.tsx","components/landing-page/landing-page.tsx","App.tsx","index.tsx"],"names":["LetterAvatar","name","size","color","letters","split","map","word","charAt","length","colors","selected_color","Math","floor","random","style","backgroundColor","verticalAlign","SelectedContactContext","React","createContext","selectedContact","setContact","Text","Typography","ContactItem","contact","first_name","last_name","emails","Consumer","context","onClick","span","className","email","GET_CONTACTS_QUERY","gql","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","ADD_PHONE_NUMBER","UPDATE_PHONE_NUMBER","REMOVE_PHONE_NUMBER","ADD_EMAIL","UPDATE_EMAIL","REMOVE_EMAIL","GET_TWITTER","IconButton","icon","loading","type","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","useAuth0","useContext","Title","UserDetails","logout","user","picture","src","level","nickname","ContactsContext","contacts","setContacts","Search","Input","TabPane","Tabs","Sidebar","useQuery","data","error","useState","searchResults","setSearchResults","hasSearched","setHasSearched","useEffect","defaultActiveKey","tab","key","placeholder","onChange","e","value","target","results","filter","toLowerCase","search","handleSearch","avatar","paragraph","rows","item","id","notification","message","description","ContactHeader","twitterLink","useMutation","removeContact","placement","onConfirm","variables","optimisticResponse","update","cache","newContacts","readQuery","query","writeQuery","okText","cancelText","twitter","href","rel","ContactCard","margin","undefined","validateEmail","test","validatePhone","phone","ContactForm","state","emailValue","phoneValue","emailError","phonError","fNameError","lNameError","onInputChange","setState","onEmailInputChange","onEmailAdd","_","find","onEmailDelete","index","splice","onPhoneInputChange","onPhoneNumberAdd","phone_number","phone_numbers","onPhoneNumberDelete","convertStringToObject","items","trim","result","obj","push","save","mutateFunction","hasErrors","onContactAdded","open","existingContacts","insert_contacts","returning","this","gutter","disabled","event","onPressEnter","mutation","postMutation","mutationObject","Component","Fab","tooltipText","ContactArea","unTrackedState","hasChanged","setHasChanged","trackedState","setTrackedState","setTwitterLink","isAddingNumber","setIsAddingNumber","isAddingEmail","setIsAddingEmail","addNumber","setAddNumber","addEmail","setAddEmail","addEmailError","setAddEmailError","addPhoneError","setAddPhoneError","updateUserMutation","removePhoneNumber","removeEmail","addPhoneNumber","addPhoneNumberMutation","addEmailAddr","addEmailAddrMutation","updatePhoneNumber","updateEmail","username","get_twitter","newState","onEditInputChange","reset","updatedContact","onPhoneAdd","contact_id","insert_phone_numbers","__typename","insert_emails","headStyle","actions","width","editable","val","number","new_number","success","duration","shape","float","new_email","email_addr","ContactContext","Provider","props","children","Paragraph","LandingPage","loginWithRedirect","App","isAuthenticated","getIdTokenClaims","accessToken","setAccessToken","a","async","token","__raw","console","log","getAccessToken","InMemoryCache","link","HttpLink","uri","authLink","setContext","headers","authorization","client","ApolloClient","concat","ReactDOM","render","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","getTokenSilently","getTokenWithPopup","domain","auth0Config","auth0_domain","client_id","auth0_client_id","redirect_uri","getElementById"],"mappings":"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","file":"static/js/main.b0094c45.chunk.js","sourcesContent":["import React from 'react';\r\nimport './letter-avatar.css';\r\nimport { Avatar } from 'antd';\r\n\r\nconst LetterAvatar : React.FC<{\r\n    name: string,\r\n    size?: any,\r\n    color?: string\r\n}> = ({name, size, color}) => {\r\n    const letters: string[] = name.split(' ').map(word => word.charAt(0));\r\n    name = `${letters[0]}${letters.length > 1 ? letters[letters.length - 1] : ''}`\r\n    const colors: string[] = ['#03A9F4', '#E91E63', '#F44336', '#9C27B0', '#673AB7', '#3F51B5'];\r\n    const selected_color = color == null ? colors[Math.floor(Math.random() * colors.length)] : color;\r\n\r\n    return (\r\n        <Avatar style={{\r\n            backgroundColor: selected_color,\r\n            verticalAlign: 'middle',\r\n        }} size={size ?? size}>\r\n            {name}\r\n        </Avatar>\r\n    );\r\n}\r\n\r\nexport default LetterAvatar;","import React from 'react';\r\nimport { Contact } from '../../models/interfaces';\r\n\r\n\r\nconst defaultState : { selectedContact: Contact | null, setContact: Function} = {\r\n    selectedContact: null,\r\n    setContact: () => {\r\n        \r\n    }\r\n}\r\n\r\nconst SelectedContactContext = React.createContext(defaultState);\r\nexport default SelectedContactContext;","import React from \"react\";\r\nimport { Row, Col, Typography } from \"antd\";\r\nimport LetterAvatar from \"../letter-avatar/letter-avatar\";\r\nimport \"./contact-item.css\";\r\nimport { Contact } from \"../../models/interfaces\";\r\nimport SelectedContactContext from \"../context/selected-contact.contexts\";\r\nconst { Text } = Typography;\r\n\r\nconst ContactItem: React.FC<{\r\n  contact: Contact;\r\n}> = ({ contact, }) => {\r\n  const { first_name, last_name, emails } = contact;\r\n  return (\r\n    <SelectedContactContext.Consumer>\r\n      {context => (\r\n        <div onClick={() => {context.setContact(contact)}}>\r\n          <Row>\r\n            <Col span={24} className={`contact-details-container`}>\r\n              <div className=\"contact-details\">\r\n                <LetterAvatar name={first_name + \" \" + last_name}  color=\"#999999\"/>\r\n                <div className=\"contact-name\">\r\n                  <Text className=\"contact-name__name\">\r\n                    {first_name} {last_name}\r\n                  </Text>\r\n                  <Text className=\"contact-name__email\">{emails[0].email}</Text>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <div className=\"divider div-transparent\"></div>\r\n        </div>\r\n      )}\r\n    </SelectedContactContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ContactItem;\r\n","import { DocumentNode } from \"graphql\";\r\nimport gql from \"graphql-tag\";\r\n\r\nexport const GET_CONTACTS_QUERY: DocumentNode = gql`\r\n  query getMyContacts {\r\n    contacts(order_by: {first_name: asc, last_name: asc}) {\r\n      id\r\n      first_name\r\n      last_name\r\n      twitter\r\n      emails {\r\n        id\r\n        email\r\n      }\r\n      phone_numbers {\r\n        id\r\n        phone_number\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_CONTACT: DocumentNode = gql`\r\n  mutation addContact(\r\n    $first_name: String!\r\n    $last_name: String!\r\n    $twitter: String\r\n    $emails: [emails_insert_input!]!\r\n    $phone_numbers: [phone_numbers_insert_input!]!\r\n  ) {\r\n    insert_contacts(\r\n      objects: {\r\n        first_name: $first_name\r\n        last_name: $last_name\r\n        twitter: $twitter\r\n        emails: { data: $emails }\r\n        phone_numbers: { data: $phone_numbers }\r\n      }\r\n    ) {\r\n      returning {\r\n        last_name\r\n        id\r\n        first_name\r\n        twitter\r\n        emails {\r\n          id\r\n          contact_id\r\n          email\r\n        }\r\n        phone_numbers {\r\n          id\r\n          phone_number\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_CONTACT: DocumentNode = gql`\r\n  mutation updateUser(\r\n    $id: Int!\r\n    $first_name: String!\r\n    $last_name: String!\r\n    $twitter: String\r\n  ) {\r\n    update_contacts(\r\n      where: { id: { _eq: $id } }\r\n      _set: {\r\n        first_name: $first_name\r\n        last_name: $last_name\r\n        twitter: $twitter\r\n      }\r\n    ) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_CONTACT: DocumentNode = gql`\r\n  mutation removeContact($id: Int!) {\r\n    delete_contacts(where: { id: { _eq: $id } }) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_PHONE_NUMBER: DocumentNode = gql`\r\n  mutation addPhoneNumber($contact_id: Int!, $phone_number: String!) {\r\n    insert_phone_numbers(\r\n      objects: { contact_id: $contact_id, phone_number: $phone_number }\r\n    ) {\r\n      returning {\r\n        id\r\n        contact_id\r\n        phone_number\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_PHONE_NUMBER: DocumentNode = gql`\r\n  mutation updatePhoneNumber($id: Int!, $phone_number: String!) {\r\n    update_phone_numbers(where: { id: { _eq: $id } }\r\n      _set: {\r\n        phone_number: $phone_number\r\n      }\r\n    ){\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_PHONE_NUMBER: DocumentNode = gql`\r\n  mutation removePhoneNumber($id: Int!) {\r\n    delete_phone_numbers(where: { id: { _eq: $id } }) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_EMAIL: DocumentNode = gql`\r\n  mutation addEmail($contact_id: Int!, $email: String!) {\r\n    insert_emails(objects: { contact_id: $contact_id, email: $email }) {\r\n      returning {\r\n        id\r\n        contact_id\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_EMAIL: DocumentNode = gql`\r\n  mutation updateEmail($id: Int!, $email: String!) {\r\n    update_emails(where: { id: { _eq: $id } }\r\n      _set: {\r\n        email: $email\r\n      }\r\n    ){\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_EMAIL: DocumentNode = gql`\r\n  mutation removeEmail($id: Int!) {\r\n    delete_emails(where: { id: { _eq: $id } }) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_TWITTER: DocumentNode = gql`\r\n  query getTwitter($username: String) {\r\n    get_twitter(username: $username)\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport \"./icon-button.css\";\r\nimport { Icon, Button } from \"antd\";\r\n\r\nconst IconButton: React.FC<{\r\n  icon: string;\r\n  color?: string;\r\n  hoverColor?: string;\r\n  onClick?: Function;\r\n  loading?: boolean;\r\n}> = ({ icon, color, onClick, loading }) => {\r\n  return (\r\n    <Button\r\n      className=\"icon-button\"\r\n      onClick={\r\n        onClick\r\n          ? () => {\r\n              onClick();\r\n            }\r\n          : () => {}\r\n      }\r\n      loading={loading}\r\n    >\r\n      {!loading ? <Icon\r\n        type={icon}\r\n        style={{\r\n          color\r\n        }}\r\n      />: null}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default IconButton;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n  window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n  children,\r\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n  ...initOptions\r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState();\r\n  const [user, setUser] = useState();\r\n  const [auth0Client, setAuth0] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      const auth0FromHook = await createAuth0Client(initOptions);\r\n      setAuth0(auth0FromHook);\r\n\r\n      if (window.location.search.includes(\"code=\")) {\r\n        const { appState } = await auth0FromHook.handleRedirectCallback();\r\n        onRedirectCallback(appState);\r\n      }\r\n\r\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n      setIsAuthenticated(isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const loginWithPopup = async (params = {}) => {\r\n    setPopupOpen(true);\r\n    try {\r\n      await auth0Client.loginWithPopup(params);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setPopupOpen(false);\r\n    }\r\n    const user = await auth0Client.getUser();\r\n    setUser(user);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleRedirectCallback = async () => {\r\n    setLoading(true);\r\n    await auth0Client.handleRedirectCallback();\r\n    const user = await auth0Client.getUser();\r\n    setLoading(false);\r\n    setIsAuthenticated(true);\r\n    setUser(user);\r\n  };\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        popupOpen,\r\n        loginWithPopup,\r\n        handleRedirectCallback,\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};","import React from \"react\";\r\nimport { Row, Col, Typography, Avatar } from \"antd\";\r\nimport LetterAvatar from \"../letter-avatar/letter-avatar\";\r\nimport IconButton from \"../icon-button/icon-button\";\r\nimport { useAuth0 } from \"../../react-auth0-spa\";\r\nconst { Title, Text } = Typography;\r\n\r\nconst  UserDetails : React.FC = () => {\r\n  const { logout, user } = useAuth0();\r\n  \r\n    return (\r\n      <Row>\r\n        <Col span={24} className=\"user-details-container\">\r\n          <div className=\"user-details\">\r\n            {!user.picture ? <LetterAvatar name=\"John Doe\" size=\"large\" /> : <Avatar size=\"large\" src={user.picture}/>}\r\n            <div className=\"header-name\">\r\n              <Title className=\"header-name__name\" level={3}>\r\n                {user.name}\r\n              </Title>\r\n              <Text className=\"header-name__email\">{user.nickname}</Text>\r\n            </div>\r\n          </div>\r\n          <IconButton icon=\"logout\" onClick = {() => logout()} color=\"#2196F3\" />\r\n        </Col>\r\n      </Row>\r\n    );\r\n}\r\n\r\nexport default UserDetails;\r\n","import React from 'react';\r\nimport { Contact } from '../../models/interfaces';\r\n\r\n\r\nconst defaultState : { contacts: Contact[], setContacts: Function} = {\r\n    contacts: [],\r\n    setContacts: () => {\r\n\r\n    }\r\n}\r\n\r\nconst ContactsContext = React.createContext(defaultState);\r\nexport default ContactsContext;","import React, { useContext, useEffect, ChangeEvent, useState } from \"react\";\r\nimport \"./sidebar.css\";\r\nimport { Row, Input, Tabs, Empty, Skeleton, notification } from \"antd\";\r\nimport ContactItem from \"../contact-item/contact-item\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport { GET_CONTACTS_QUERY } from \"../../queries\";\r\nimport { Contact } from \"../../models/interfaces\";\r\nimport UserDetails from \"../user-details/user-details\";\r\nimport ContactsContext from \"../context/contacts.context\";\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\n\r\nconst Sidebar: React.FC = () => {\r\n  const { data, loading, error } = useQuery(GET_CONTACTS_QUERY);\r\n  const { contacts, setContacts } = useContext(ContactsContext);\r\n  const [searchResults, setSearchResults] = useState();\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n\r\n  const handleSearch = (e: ChangeEvent) => {\r\n    const { value } = e.target as HTMLInputElement;\r\n    if (value === \"\") {\r\n      setHasSearched(false);\r\n    } else {\r\n      const results = contacts.filter(\r\n        (contact: Contact) =>\r\n          (contact.first_name + \" \" + contact.last_name)\r\n            .toLowerCase()\r\n            .search(value.toLowerCase()) !== -1\r\n      );\r\n      setHasSearched(true);\r\n      setSearchResults(results);\r\n    }\r\n  };\r\n\r\n  const handleLoadingState = () => {\r\n    if (loading) {\r\n      return <Skeleton avatar paragraph={{ rows: 1 }} />;\r\n    } else if (!loading && data) {\r\n      if (contacts.length === 0) {\r\n        return <Empty />;\r\n      } else {\r\n        if (hasSearched) {\r\n          return searchResults.map((item: Contact) => {\r\n            return <ContactItem key={item.id} contact={item} />;\r\n          });\r\n        }\r\n\r\n        return contacts.map((item: Contact) => {\r\n          return <ContactItem key={item.id} contact={item} />;\r\n        });\r\n      }\r\n    } else if (error) {\r\n      notification.error({\r\n        message: \"Error\",\r\n        description: \"There was a problem fetching contacts\"\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data && data.contacts) {\r\n      setContacts(data.contacts);\r\n    }\r\n  }, [data, setContacts]);\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <UserDetails />\r\n      <Row className=\"recents\">\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab=\"Contacts\" key=\"1\">\r\n            <Search\r\n              placeholder=\"Type a name to search for a contact\"\r\n              onChange={e => handleSearch(e)}\r\n            />\r\n            <div className=\"contacts\">{handleLoadingState()}</div>\r\n          </TabPane>\r\n        </Tabs>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useContext } from \"react\";\r\nimport { Row, Col, Typography, Popconfirm, Tooltip } from \"antd\";\r\nimport IconButton from \"../icon-button/icon-button\";\r\nimport SelectedContactContext from \"../context/selected-contact.contexts\";\r\nimport { useMutation } from \"react-apollo\";\r\nimport { REMOVE_CONTACT, GET_CONTACTS_QUERY } from \"../../queries\";\r\nimport { Contact } from \"../../models/interfaces\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst ContactHeader: React.FC<{\r\n  twitterLink?: string | null;\r\n}> = ({twitterLink}) => {\r\n  const { selectedContact, setContact } = useContext(SelectedContactContext);\r\n  const [removeContact, { loading }] = useMutation(REMOVE_CONTACT);\r\n\r\n  const _handleDelete = () => {\r\n    if (selectedContact != null) {\r\n      removeContact({\r\n        variables: { id: selectedContact.id },\r\n        optimisticResponse: null,\r\n        update: cache => {\r\n          const existingContacts: any = cache.readQuery({\r\n            query: GET_CONTACTS_QUERY\r\n          });\r\n          const newContacts = existingContacts.contacts.filter(\r\n            (contact: Contact) => contact.id !== selectedContact.id\r\n          );\r\n          setContact(null);\r\n          cache.writeQuery({\r\n            query: GET_CONTACTS_QUERY,\r\n            data: { contacts: newContacts }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row className=\"main-content-header\">\r\n      <Col span={24}>\r\n        {selectedContact == null ? (\r\n          <div>\r\n            <Title level={2} className=\"main-content-header-title\">\r\n              Add new\r\n            </Title>\r\n            <Text type=\"secondary\">Add a new contact to your address book</Text>\r\n          </div>\r\n        ) : (\r\n          <div className=\"main-content-header-items\">\r\n            <Title level={2} className=\"main-content-header-title\">\r\n              {selectedContact.first_name + \" \" + selectedContact.last_name}\r\n            </Title>\r\n            <div className=\"buttons\">\r\n              <Popconfirm\r\n                placement=\"rightBottom\"\r\n                title=\"Are you sure you want to delete this contact?\"\r\n                onConfirm={() => _handleDelete()}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <IconButton icon=\"delete\" color=\"red\" loading={loading} />\r\n              </Popconfirm>\r\n              {twitterLink ? (\r\n                <Tooltip placement=\"top\" title={selectedContact.twitter}>\r\n                  <a\r\n                    href={twitterLink != null ? twitterLink : \"#\"}\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    <IconButton icon=\"twitter\" color=\"#00aced\" />\r\n                  </a>\r\n                </Tooltip>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ContactHeader;\r\n","import React from \"react\";\r\nimport { Card, Avatar, Icon, Typography } from \"antd\";\r\nimport { Contact } from \"../../models/interfaces\";\r\nconst { Text } = Typography;\r\n\r\nconst ContactCard: React.FC<{\r\n  selectedContact:\r\n    | Contact\r\n    | null\r\n    | {\r\n        first_name?: string;\r\n        last_name?: string;\r\n        twitter?: string;\r\n        emails?: any[];\r\n        phone_numbers?: any[];\r\n      };\r\n  twitterLink?: string | null;\r\n}> = ({ selectedContact, twitterLink }) => {\r\n  return (\r\n    <Card className=\"main-content-contact-details mb-2\">\r\n      <Avatar\r\n        size={120}\r\n        icon=\"user\"\r\n        style={{\r\n          backgroundColor: \"#03a9f4\",\r\n          margin: \"0 auto\"\r\n        }}\r\n      />\r\n      <Text className=\"main-content-contact-name\">\r\n        {selectedContact\r\n          ? `${selectedContact.first_name ? selectedContact.first_name : \"\"} ${\r\n              selectedContact.last_name ? selectedContact.last_name : \"\"\r\n            }`\r\n          : \"N/A\"}\r\n      </Text>\r\n      <Text>\r\n        {selectedContact &&\r\n        selectedContact.emails &&\r\n        selectedContact.emails.length > 0\r\n          ? selectedContact.emails[0].email\r\n          : \"N/A\"}\r\n      </Text>\r\n      <Text>\r\n        <Icon type=\"twitter\"></Icon>{\" \"}\r\n        {!selectedContact || selectedContact.twitter === \"\" ? (\r\n          \"N/A\"\r\n        ) : (\r\n          <a\r\n            href={twitterLink ? twitterLink : undefined}\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            {selectedContact?.twitter}\r\n          </a>\r\n        )}\r\n      </Text>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ContactCard;\r\n","import { notification } from \"antd\";\r\n\r\nexport const showErrorNotification = (title: string, message: string) => {\r\n  notification.error({\r\n    message: title,\r\n    description: message\r\n  });\r\n};\r\n\r\nexport const getRandomColor = () => {\r\n  const colors: string[] = [\r\n    \"#03A9F4\",\r\n    \"#E91E63\",\r\n    \"#F44336\",\r\n    \"#9C27B0\",\r\n    \"#673AB7\",\r\n    \"#3F51B5\"\r\n  ];\r\n  const selected_color = colors[Math.floor(Math.random() * colors.length)];\r\n\r\n  return selected_color;\r\n};\r\n\r\nexport const validateEmail = (email: string) => {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(email);\r\n};\r\n\r\nexport const validatePhone = (phone: string) => {\r\n  const re = /^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$/;\r\n  return re.test(phone);\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport _ from \"lodash\";\r\nimport {\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Button,\r\n  Typography,\r\n  Icon,\r\n  notification\r\n} from \"antd\";\r\nimport ContactCard from \"../contact-card/contact-card\";\r\nimport \"./contact-form.css\";\r\nimport { validateEmail, validatePhone } from \"../../helpers\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { ADD_CONTACT, GET_CONTACTS_QUERY } from \"../../queries\";\r\nconst { Text } = Typography;\r\n\r\nclass ContactForm extends Component {\r\n  state: {\r\n    contact: {\r\n      first_name?: string;\r\n      last_name?: string;\r\n      twitter?: string;\r\n      emails?: any[];\r\n      phone_numbers?: any[];\r\n    };\r\n    emailValue: string;\r\n    emailError: string | null;\r\n    phonError: string | null;\r\n    fNameError: string | null;\r\n    lNameError: string | null;\r\n    phoneValue: string;\r\n  } = {\r\n    contact: {},\r\n    emailValue: \"\",\r\n    phoneValue: \"\",\r\n    emailError: null,\r\n    phonError: null,\r\n    fNameError: null,\r\n    lNameError: null\r\n  };\r\n\r\n  //handle input change\r\n  onInputChange = (e: ChangeEvent) => {\r\n    const target = e.target as HTMLInputElement;\r\n    const name = target.name;\r\n    let value: any = target.value;\r\n\r\n    if (name === \"first_name\") {\r\n      this.setState({ fNameError: null });\r\n    } else if (name === \"last_name\") {\r\n      this.setState({ lNameError: null });\r\n    }\r\n\r\n    this.setState({ contact: { ...this.state.contact, [name]: value } });\r\n  };\r\n\r\n  onEmailInputChange = (e: ChangeEvent) => {\r\n    const { value } = e.target as HTMLInputElement;\r\n    this.setState({ emailValue: value });\r\n  };\r\n\r\n  onEmailAdd = (e: any) => {\r\n    this.setState({ emailError: null });\r\n    const { value } = e.target as HTMLInputElement;\r\n    const { contact } = this.state;\r\n\r\n    const email = value;\r\n    if (!validateEmail(email)) {\r\n      this.setState({ emailError: \"Enter a valid email\" });\r\n    } else if (contact.emails !== null && _.find(contact.emails, { email })) {\r\n      this.setState({ emailError: \"You have already entered this email\" });\r\n    } else {\r\n      this.setState({\r\n        contact: {\r\n          ...contact,\r\n          emails:\r\n            contact.emails !== undefined || contact.emails != null\r\n              ? [...contact.emails, { email }]\r\n              : [{ email }]\r\n        },\r\n        emailValue: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  onEmailDelete = (index: number) => {\r\n    const { contact } = this.state;\r\n\r\n    if (contact != null) {\r\n      this.setState({ ...this.state.contact.emails?.splice(index, 1) });\r\n    }\r\n  };\r\n\r\n  onPhoneInputChange = (e: ChangeEvent) => {\r\n    const { value } = e.target as HTMLInputElement;\r\n    this.setState({ phoneValue: value });\r\n  };\r\n\r\n  onPhoneNumberAdd = (e: any) => {\r\n    this.setState({ phonError: null });\r\n    const { value } = e.target as HTMLInputElement;\r\n    const { contact } = this.state;\r\n\r\n    const phone_number = value;\r\n    if (!validatePhone(phone_number)) {\r\n      this.setState({ phonError: \"Enter a valid phone number\" });\r\n    } else if (\r\n      contact.phone_numbers !== null &&\r\n      _.find(contact.phone_numbers, { phone_number })\r\n    ) {\r\n      this.setState({\r\n        phonError: \"You have already entered this phone number\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        contact: {\r\n          ...contact,\r\n          phone_numbers:\r\n            contact.phone_numbers !== undefined || contact.phone_numbers != null\r\n              ? [...contact.phone_numbers, { phone_number }]\r\n              : [{ phone_number }]\r\n        },\r\n        phoneValue: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  onPhoneNumberDelete = (index: number) => {\r\n    const { contact } = this.state;\r\n\r\n    if (contact != null) {\r\n      this.setState({ ...this.state.contact.phone_numbers?.splice(index, 1) });\r\n    }\r\n  };\r\n\r\n  //convert string to array of objects\r\n  convertStringToObject = (value: string, type: string) => {\r\n    const items = value.trim().split(\",\");\r\n    const result: {}[] = [];\r\n\r\n    for (let item of items) {\r\n      if (item !== \"\") {\r\n        const obj = {\r\n          [type]: item\r\n        };\r\n\r\n        result.push(obj);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  save = (mutateFunction: Function) => {\r\n    const { emails, first_name, last_name, phone_numbers } = this.state.contact;\r\n    let hasErrors = false;\r\n\r\n    if (first_name === undefined || first_name === \"\") {\r\n      hasErrors = true;\r\n      this.setState({ fNameError: \"Enter a first name\" });\r\n    }\r\n\r\n    if (last_name === undefined || last_name === \"\") {\r\n      hasErrors = true;\r\n      this.setState({ lNameError: \"Enter a last name\" });\r\n    }\r\n\r\n    if (emails === undefined || emails?.length === 0) {\r\n      hasErrors = true;\r\n      this.setState({ emailError: \"Provide at least one email address\" });\r\n    }\r\n\r\n    if (phone_numbers === undefined || phone_numbers?.length === 0) {\r\n      hasErrors = true;\r\n      this.setState({ phonError: \"Provide at least one phone number\" });\r\n    }\r\n\r\n    if (!hasErrors) {\r\n      mutateFunction();\r\n    }\r\n  };\r\n\r\n  onContactAdded = (cache: any, data: any) => {\r\n    notification.open({\r\n      message: \"Done\",\r\n      description: \"Contact has been updated\"\r\n    });\r\n\r\n    const existingContacts: any = cache.readQuery({\r\n      query: GET_CONTACTS_QUERY\r\n    });\r\n    cache.writeQuery({\r\n      query: GET_CONTACTS_QUERY,\r\n      data: {\r\n        contacts: [\r\n          data.insert_contacts.returning[0],\r\n          ...existingContacts.contacts\r\n        ]\r\n      }\r\n    });\r\n    this.setState({\r\n      contact: {},\r\n      emailValue: \"\",\r\n      phoneValue: \"\",\r\n      emailError: null,\r\n      phonError: null,\r\n      fNameError: null,\r\n      lNameError: null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      contact,\r\n      emailValue,\r\n      emailError,\r\n      phoneValue,\r\n      phonError,\r\n      fNameError,\r\n      lNameError\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Row gutter={20}>\r\n          <Col span={16}>\r\n            <Card title=\"Fill this form to add a contact\">\r\n              <Row gutter={10}>\r\n                <Col span={8} className=\"custom-input-field\">\r\n                  <label>\r\n                    First name <Text type=\"danger\">*</Text>\r\n                  </label>\r\n                  <Input\r\n                    className=\"custom-input\"\r\n                    name=\"first_name\"\r\n                    onChange={this.onInputChange}\r\n                    value={contact.first_name}\r\n                  />\r\n                  <Text type=\"danger\">\r\n                    <i>{fNameError}</i>\r\n                  </Text>\r\n                </Col>\r\n                <Col span={8} className=\"custom-input-field mb-3\">\r\n                  <label>\r\n                    Last name <Text type=\"danger\">*</Text>\r\n                  </label>\r\n                  <Input\r\n                    className=\"custom-input\"\r\n                    name=\"last_name\"\r\n                    onChange={this.onInputChange}\r\n                    value={contact.last_name}\r\n                  />\r\n                  <Text type=\"danger\">\r\n                    <i>{lNameError}</i>\r\n                  </Text>\r\n                </Col>\r\n                <Col span={8} className=\"custom-input-field\">\r\n                  <label>Twitter</label>\r\n                  <Input\r\n                    className=\"custom-input\"\r\n                    name=\"twitter\"\r\n                    onChange={this.onInputChange}\r\n                    value={contact.twitter}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row gutter={10}>\r\n                <Col span={12} className=\"custom-input-field\">\r\n                  <label>\r\n                    Phone Numbers <Text type=\"danger\">*</Text>\r\n                  </label>\r\n                  <div className=\"tag-container\">\r\n                    {contact.phone_numbers &&\r\n                    contact.phone_numbers.length > 0 ? (\r\n                      contact.phone_numbers.map((contact, index) => (\r\n                        <div key={index} className=\"tag-item\">\r\n                          <Text>{contact.phone_number}</Text>\r\n                          <Icon\r\n                            type=\"close\"\r\n                            className=\"tag-icon\"\r\n                            onClick={() => this.onPhoneNumberDelete(index)}\r\n                          />\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      <Button disabled type=\"dashed\">\r\n                        No numbers added\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                  <Input\r\n                    className=\"custom-input\"\r\n                    onChange={event => this.onPhoneInputChange(event)}\r\n                    value={phoneValue}\r\n                    onPressEnter={event => this.onPhoneNumberAdd(event)}\r\n                  />\r\n                  {!phonError ? (\r\n                    <Text type=\"secondary\">\r\n                      <i>(Enter a number and hit Enter to add)</i>\r\n                    </Text>\r\n                  ) : (\r\n                    <Text type=\"danger\">\r\n                      <i>{phonError}</i>\r\n                    </Text>\r\n                  )}\r\n                </Col>\r\n                <Col span={12} className=\"custom-input-field\">\r\n                  <label>\r\n                    Emails <Text type=\"danger\">*</Text>\r\n                  </label>\r\n                  <div className=\"tag-container\">\r\n                    {contact.emails && contact.emails.length > 0 ? (\r\n                      contact.emails.map((contact, index) => (\r\n                        <div key={index} className=\"tag-item\">\r\n                          <Text>{contact.email}</Text>\r\n                          <Icon\r\n                            type=\"close\"\r\n                            className=\"tag-icon\"\r\n                            onClick={() => this.onEmailDelete(index)}\r\n                          />\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      <Button disabled type=\"dashed\">\r\n                        No emails added\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                  <Input\r\n                    className=\"custom-input\"\r\n                    onChange={event => this.onEmailInputChange(event)}\r\n                    value={emailValue}\r\n                    onPressEnter={event => this.onEmailAdd(event)}\r\n                  />\r\n                  {!emailError ? (\r\n                    <Text type=\"secondary\">\r\n                      <i>(Enter an email and hit Enter to add)</i>\r\n                    </Text>\r\n                  ) : (\r\n                    <Text type=\"danger\">\r\n                      <i>{emailError}</i>\r\n                    </Text>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n              <Mutation\r\n                mutation={ADD_CONTACT}\r\n                variables={contact}\r\n                update={(cache: any, { data }: any) => {\r\n                  this.onContactAdded(cache, data);\r\n                }}\r\n              >\r\n                {(postMutation: Function, mutationObject: any) => (\r\n                  <div>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      className=\"save-button\"\r\n                      loading={mutationObject.loading}\r\n                      onClick={() => this.save(postMutation)}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                    {mutationObject.error\r\n                      ? notification.error({\r\n                          message: \"Error\",\r\n                          description: \"Could not save the contact\"\r\n                        })\r\n                      : \"\"}\r\n                  </div>\r\n                )}\r\n              </Mutation>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <ContactCard selectedContact={contact} />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport \"./fab.css\";\r\nimport { Icon, Tooltip } from \"antd\";\r\n\r\nconst Fab: React.FC<{\r\n  onClick?: Function;\r\n  icon: string;\r\n  tooltipText?: string;\r\n}> = ({ onClick, icon, tooltipText }) => {\r\n  return (\r\n    <Tooltip placement=\"top\" title={tooltipText}>\r\n    <div\r\n      className=\"fab-container\"\r\n      onClick={onClick ? () => onClick() : () => null}\r\n    >\r\n      <Icon type={icon}/>\r\n    </div>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default Fab;\r\n","import React, { ChangeEvent, useEffect, useState, useContext } from \"react\";\r\nimport \"./contact-area.css\";\r\nimport _ from \"lodash\";\r\nimport {\r\n  Row,\r\n  Typography,\r\n  Col,\r\n  Card,\r\n  Icon,\r\n  Input,\r\n  Button,\r\n  notification,\r\n  Popconfirm\r\n} from \"antd\";\r\nimport SelectedContactContext from \"../context/selected-contact.contexts\";\r\nimport { useMutation, useQuery } from \"react-apollo\";\r\nimport {\r\n  UPDATE_CONTACT,\r\n  GET_CONTACTS_QUERY,\r\n  GET_TWITTER,\r\n  REMOVE_EMAIL,\r\n  REMOVE_PHONE_NUMBER,\r\n  ADD_PHONE_NUMBER,\r\n  UPDATE_PHONE_NUMBER,\r\n  ADD_EMAIL,\r\n  UPDATE_EMAIL\r\n} from \"../../queries\";\r\nimport { Contact, PhoneNumber, Email } from \"../../models/interfaces\";\r\nimport ContactsContext from \"../context/contacts.context\";\r\nimport ContactHeader from \"../contact-header/contact-header\";\r\nimport ContactCard from \"../contact-card/contact-card\";\r\nimport ContactForm from \"../contact-form/contact-form\";\r\nimport Fab from \"../fab/fab\";\r\nimport { validateEmail, validatePhone } from \"../../helpers\";\r\nconst { Title, Text } = Typography;\r\n\r\nconst ContactArea: React.FC = () => {\r\n  const { selectedContact, setContact } = useContext(SelectedContactContext);\r\n\r\n  const { contacts } = React.useContext(ContactsContext);\r\n\r\n  //local state :: convert to class component. using too many hooks\r\n  const [hasChanged, setHasChanged] = useState(false);\r\n  const [trackedState, setTrackedState] = useState();\r\n  const [twitterLink, setTwitterLink] = useState();\r\n  const [isAddingNumber, setIsAddingNumber] = useState(false);\r\n  const [isAddingEmail, setIsAddingEmail] = useState(false);\r\n  const [addNumber, setAddNumber] = useState();\r\n  const [addEmail, setAddEmail] = useState();\r\n  const [addEmailError, setAddEmailError] = useState();\r\n  const [addPhoneError, setAddPhoneError] = useState();\r\n\r\n  //mutations for basic CRUD\r\n  const [updateUserMutation, { loading }] = useMutation(UPDATE_CONTACT);\r\n  const [removePhoneNumber] = useMutation(REMOVE_PHONE_NUMBER);\r\n  const [removeEmail] = useMutation(REMOVE_EMAIL);\r\n  const [addPhoneNumber, addPhoneNumberMutation] = useMutation(ADD_PHONE_NUMBER);\r\n  const [addEmailAddr, addEmailAddrMutation] = useMutation(ADD_EMAIL);\r\n  const [updatePhoneNumber] = useMutation(UPDATE_PHONE_NUMBER);\r\n  const [updateEmail] = useMutation(UPDATE_EMAIL);\r\n\r\n  let unTrackedState: Contact | undefined;\r\n\r\n  const query = useQuery(GET_TWITTER, {\r\n    variables: {\r\n      username: selectedContact ? selectedContact.twitter : null\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedContact) {\r\n      setTrackedState({ ...selectedContact });\r\n    }\r\n\r\n    if (query.data) {\r\n      setTwitterLink(query.data.get_twitter);\r\n    }\r\n  }, [selectedContact, query]);\r\n\r\n  if (selectedContact) {\r\n    unTrackedState = _.find(contacts, [\"id\", selectedContact?.id]);\r\n  }\r\n\r\n  //handle input change\r\n  const onInputChange = (e: ChangeEvent) => {\r\n    const target = e.target as HTMLInputElement;\r\n    const value: any = target.value;\r\n    const name = target.name;\r\n\r\n    const newState: any = { ...trackedState, [name]: value };\r\n    if (\r\n      unTrackedState !== null &&\r\n      unTrackedState?.first_name === newState?.first_name &&\r\n      (unTrackedState?.twitter === newState?.twitter ||\r\n        newState.twitter === undefined) &&\r\n      unTrackedState?.last_name === newState?.last_name\r\n    ) {\r\n      setHasChanged(false);\r\n    } else {\r\n      setHasChanged(true);\r\n    }\r\n\r\n    setTrackedState(newState);\r\n  };\r\n\r\n  const onEditInputChange = (e: ChangeEvent) => {\r\n    const target = e.target as HTMLInputElement;\r\n    const value: any = target.value;\r\n    const name = target.name;\r\n\r\n    if (name === \"email\") {\r\n      setAddEmail(value);\r\n    } else if (name === \"phone\") {\r\n      setAddNumber(value);\r\n    }\r\n  };\r\n\r\n  //reset input to original data\r\n  const reset = () => {\r\n    setTrackedState(_.find(contacts, [\"id\", trackedState?.id]));\r\n    setHasChanged(false);\r\n  };\r\n\r\n  //save changes to data\r\n  const save = () => {\r\n    updateUserMutation({\r\n      variables: {\r\n        id: trackedState?.id,\r\n        first_name: trackedState?.first_name,\r\n        last_name: trackedState?.last_name,\r\n        twitter: trackedState?.twitter\r\n      },\r\n      optimisticResponse: null,\r\n      //update local cache with updated data\r\n      update: cache => {\r\n        notification.open({\r\n          message: \"Done\",\r\n          description: \"Contact has been updated\"\r\n        });\r\n\r\n        const existingContacts: any = cache.readQuery({\r\n          query: GET_CONTACTS_QUERY\r\n        });\r\n        const newContacts = existingContacts.contacts.map(\r\n          (contact: Contact) => {\r\n            if (trackedState && contact.id === trackedState.id) {\r\n              const updatedContact = {\r\n                ...contact,\r\n                first_name: trackedState.first_name,\r\n                last_name: trackedState.last_name,\r\n                twitter: trackedState.twitter\r\n              };\r\n              setContact(updatedContact);\r\n              return updatedContact;\r\n            } else {\r\n              return contact;\r\n            }\r\n          }\r\n        );\r\n        cache.writeQuery({\r\n          query: GET_CONTACTS_QUERY,\r\n          data: { contacts: newContacts }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  //add a phone number for the contact\r\n  const onPhoneAdd = () => {\r\n    setAddPhoneError(null);\r\n\r\n    if (selectedContact) {\r\n      if (!validatePhone(addNumber)) {\r\n        setAddPhoneError(\"Enter a valid phone number\");\r\n      } else {\r\n        addPhoneNumber({\r\n          variables: {\r\n            contact_id: selectedContact?.id,\r\n            phone_number: addNumber\r\n          },\r\n          optimisticResponse: null,\r\n          update: (cache, { data }) => {\r\n            notification.open({\r\n              message: \"Done\",\r\n              description: \"Phone number has been added\"\r\n            });\r\n\r\n            const existingContacts: any = cache.readQuery({\r\n              query: GET_CONTACTS_QUERY\r\n            });\r\n            const newContacts = existingContacts.contacts.map(\r\n              (contact: Contact) => {\r\n                if (selectedContact && contact.id === selectedContact.id) {\r\n                  const phone_number = data.insert_phone_numbers.returning[0];\r\n                  contact.phone_numbers = [\r\n                    ...contact.phone_numbers,\r\n                    {\r\n                      __typename: 'phone_numbers_insert_input',\r\n                      id: phone_number.id,\r\n                      phone_number: phone_number.phone_number,\r\n                      contact_id: phone_number.contact_id\r\n                    }\r\n                  ];\r\n                  setContact(contact);\r\n                }\r\n                setIsAddingNumber(false);\r\n                return contact;\r\n              }\r\n            );\r\n            cache.writeQuery({\r\n              query: GET_CONTACTS_QUERY,\r\n              data: { contacts: newContacts }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  //delete a phone number\r\n  const onNumberDelete = (id: number | undefined) => {\r\n    if (id) {\r\n      removePhoneNumber({\r\n        variables: { id: id },\r\n        optimisticResponse: null,\r\n        update: cache => {\r\n          const existingContacts: any = cache.readQuery({\r\n            query: GET_CONTACTS_QUERY\r\n          });\r\n          const newContacts = existingContacts.contacts.map(\r\n            (contact: Contact) => {\r\n              if (selectedContact && contact.id === selectedContact.id) {\r\n                contact.phone_numbers = contact.phone_numbers.filter(\r\n                  phone_number => phone_number.id !== id\r\n                );\r\n\r\n                setContact(contact);\r\n              }\r\n              return contact;\r\n            }\r\n          );\r\n          cache.writeQuery({\r\n            query: GET_CONTACTS_QUERY,\r\n            data: { contacts: newContacts }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onNumberEdit = (number: PhoneNumber, new_number: string) => {\r\n    if(new_number === number.phone_number){\r\n      return;\r\n    }\r\n\r\n\r\n    if(validatePhone(new_number)){\r\n      updatePhoneNumber({\r\n        variables: {\r\n          id: number.id,\r\n          phone_number: new_number\r\n        },\r\n        optimisticResponse: null,\r\n        update: cache => {\r\n            notification.success({\r\n              message: \"Phone number edited\",\r\n            });\r\n\r\n            const existingContacts: any = cache.readQuery({\r\n              query: GET_CONTACTS_QUERY\r\n            });\r\n            const newContacts = existingContacts.contacts.map(\r\n              (contact: Contact) => {\r\n                if (selectedContact && contact.id === selectedContact.id) {\r\n                  contact.phone_numbers.map((phone_number: PhoneNumber) => {\r\n                    if(phone_number.id === number.id){\r\n                      phone_number.phone_number = new_number\r\n                    }\r\n\r\n                    return phone_number;\r\n                  });\r\n                  setContact(contact);\r\n                }\r\n                return contact;\r\n              }\r\n            );\r\n            cache.writeQuery({\r\n              query: GET_CONTACTS_QUERY,\r\n              data: { contacts: newContacts }\r\n            });\r\n          }\r\n      })\r\n    }else{\r\n      notification.error({\r\n        message: 'Invalid phone number provided',\r\n        placement: \"bottomRight\",\r\n        duration: 1.5,\r\n     })\r\n    }\r\n  };\r\n\r\n  const onEmailAdd = () => {\r\n    setAddEmailError(null);\r\n\r\n    if (selectedContact) {\r\n      if (!validateEmail(addEmail)) {\r\n        setAddEmailError(\"Enter a valid phone number\");\r\n      } else {\r\n        addEmailAddr({\r\n          variables: {\r\n            contact_id: selectedContact?.id,\r\n            email: addEmail\r\n          },\r\n          optimisticResponse: null,\r\n          update: (cache, { data }) => {\r\n            notification.open({\r\n              message: \"Done\",\r\n              description: \"Phone number has been added\"\r\n            });\r\n\r\n            const existingContacts: any = cache.readQuery({\r\n              query: GET_CONTACTS_QUERY\r\n            });\r\n            const newContacts = existingContacts.contacts.map(\r\n              (contact: Contact) => {\r\n                if (selectedContact && contact.id === selectedContact.id) {\r\n                  const email = data.insert_emails.returning[0];\r\n                  contact.emails = [\r\n                    ...contact.emails,\r\n                    {\r\n                      __typename: 'emails_insert_input',\r\n                      id: email.id,\r\n                      email: email.email\r\n                    }\r\n                  ];\r\n                  setContact(contact);\r\n                }\r\n                setIsAddingEmail(false);\r\n                return contact;\r\n              }\r\n            );\r\n            cache.writeQuery({\r\n              query: GET_CONTACTS_QUERY,\r\n              data: { contacts: newContacts }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEmailEdit = (email: Email, new_email: string) => {\r\n    if(email.email === new_email){\r\n      return;\r\n    }\r\n\r\n    \r\n    if(validateEmail(new_email)){\r\n      updateEmail({\r\n        variables: {\r\n          id: email.id,\r\n          email: new_email\r\n        },\r\n        optimisticResponse: null,\r\n        update: cache => {\r\n            notification.success({\r\n              message: \"Email address updated\",\r\n            });\r\n\r\n            const existingContacts: any = cache.readQuery({\r\n              query: GET_CONTACTS_QUERY\r\n            });\r\n            const newContacts = existingContacts.contacts.map(\r\n              (contact: Contact) => {\r\n                if (selectedContact && contact.id === selectedContact.id) {\r\n                  contact.emails.map((email_addr: Email) => {\r\n                    if(email.id === email_addr.id){\r\n                      email_addr.email = new_email\r\n                    }\r\n\r\n                    return email_addr;\r\n                  });\r\n                  setContact(contact);\r\n                }\r\n                return contact;\r\n              }\r\n            );\r\n            cache.writeQuery({\r\n              query: GET_CONTACTS_QUERY,\r\n              data: { contacts: newContacts }\r\n            });\r\n          }\r\n      })\r\n    }else{\r\n      notification.error({\r\n        message: 'Invalid email address provided',\r\n        placement: \"bottomRight\",\r\n        duration: 1.5,\r\n     })\r\n    }\r\n  }\r\n\r\n  //delete an email\r\n  const onEmailDelete = (id: number | undefined) => {\r\n    if (id) {\r\n      removeEmail({\r\n        variables: { id: id },\r\n        optimisticResponse: null,\r\n        update: cache => {\r\n          const existingContacts: any = cache.readQuery({\r\n            query: GET_CONTACTS_QUERY\r\n          });\r\n          const newContacts = existingContacts.contacts.map(\r\n            (contact: Contact) => {\r\n              if (selectedContact && contact.id === selectedContact.id) {\r\n                contact.emails = contact.emails.filter(\r\n                  email => email.id !== id\r\n                );\r\n              }\r\n              return contact;\r\n            }\r\n          );\r\n          cache.writeQuery({\r\n            query: GET_CONTACTS_QUERY,\r\n            data: { contacts: newContacts }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  //render items based on condition\r\n  const renderItems = () => {\r\n    return (\r\n      <div>\r\n        <ContactHeader twitterLink={twitterLink} />\r\n        <div className=\"main-content-body\">\r\n          {selectedContact && trackedState ? (\r\n            <div className=\"contact-details-area\">\r\n              <Row gutter={20}>\r\n                <Col span={8}>\r\n                  <Title level={4}>Contact Info</Title>\r\n                  <ContactCard\r\n                    selectedContact={selectedContact}\r\n                    twitterLink={twitterLink}\r\n                  />\r\n                </Col>\r\n                <Col span={16}>\r\n                  <Title level={4}>Edit details</Title>\r\n                  <Row gutter={16}>\r\n                    <Col span={12} className=\"custom-input-field\">\r\n                      <label>First name</label>\r\n                      <Input\r\n                        value={trackedState.first_name}\r\n                        className=\"custom-input\"\r\n                        onChange={onInputChange}\r\n                        name=\"first_name\"\r\n                      />\r\n                    </Col>\r\n                    <Col span={12} className=\"custom-input-field mb-3\">\r\n                      <label>Last name</label>\r\n                      <Input\r\n                        value={trackedState.last_name}\r\n                        className=\"custom-input\"\r\n                        onChange={onInputChange}\r\n                        name=\"last_name\"\r\n                      />\r\n                    </Col>\r\n                    <Col span={24} className=\"custom-input-field\">\r\n                      <label>Twitter</label>\r\n                      <Input\r\n                        value={\r\n                          trackedState.twitter\r\n                            ? trackedState.twitter\r\n                            : undefined\r\n                        }\r\n                        className=\"custom-input\"\r\n                        onChange={onInputChange}\r\n                        name=\"twitter\"\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    className=\"save-button\"\r\n                    disabled={!hasChanged}\r\n                    onClick={save}\r\n                    loading={loading}\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                  {hasChanged ? (\r\n                    <Button className=\"save-button\" onClick={reset}>\r\n                      Reset\r\n                    </Button>\r\n                  ) : null}\r\n                </Col>\r\n              </Row>\r\n              <Row gutter={20}>\r\n                <Col span={8}>\r\n                  <Card\r\n                    title=\"Phone numbers\"\r\n                    className=\"mb-1\"\r\n                    headStyle={{ backgroundColor: \"#fafafa\" }}\r\n                    actions={[\r\n                      <Icon\r\n                        type={isAddingNumber ? \"close\" : \"plus\"}\r\n                        key=\"phone_add\"\r\n                        onClick={() => setIsAddingNumber(!isAddingNumber)}\r\n                      ></Icon>\r\n                    ]}\r\n                  >\r\n                    {selectedContact.phone_numbers.map((item, index) => {\r\n                      return (\r\n                        <div className=\"deletable-item\" key={index}>\r\n                          <div style={{ width: \"90%\" }}>\r\n                            <Text\r\n                              editable={{ onChange: (val: string) => onNumberEdit(item, val) }}\r\n                              className=\"deletable-text\"\r\n                            >\r\n                              {item.phone_number}\r\n                            </Text>\r\n                          </div>\r\n                          {selectedContact.phone_numbers.length > 1 ? (\r\n                            <Popconfirm\r\n                              placement=\"rightBottom\"\r\n                              title=\"Are you sure you want to remove this phone number?\"\r\n                              onConfirm={() => onNumberDelete(item.id)}\r\n                              okText=\"Yes\"\r\n                              cancelText=\"No\"\r\n                            >\r\n                              <Button\r\n                                icon=\"delete\"\r\n                                type=\"danger\"\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                              />\r\n                            </Popconfirm>\r\n                          ) : null}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                    {isAddingNumber ? (\r\n                      <div className=\"custom-input-field\">\r\n                        <label>Phone</label>\r\n                        <Row>\r\n                          <Col span={20}>\r\n                            <Input\r\n                              className=\"custom-input\"\r\n                              value={addNumber}\r\n                              name=\"phone\"\r\n                              onChange={onEditInputChange}\r\n                            />\r\n                          </Col>\r\n                          <Button\r\n                            type=\"ghost\"\r\n                            icon=\"check\"\r\n                            style={{ float: \"right\" }}\r\n                            loading={addPhoneNumberMutation.loading}\r\n                            onClick={onPhoneAdd}\r\n                          />\r\n                        </Row>\r\n                        {addPhoneError ? (\r\n                          <Text type=\"danger\">\r\n                            <i>{addPhoneError}</i>\r\n                          </Text>\r\n                        ) : null}\r\n                      </div>\r\n                    ) : null}\r\n                  </Card>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Card\r\n                    title=\"Email addresses\"\r\n                    headStyle={{ backgroundColor: \"#fafafa\" }}\r\n                    actions={[\r\n                      <Icon\r\n                        type={isAddingEmail ? \"close\" : \"plus\"}\r\n                        key=\"email_add\"\r\n                        onClick={() => setIsAddingEmail(!isAddingEmail)}\r\n                      ></Icon>\r\n                    ]}\r\n                  >\r\n                    {selectedContact.emails.map((item, index) => {\r\n                      return (\r\n                        <div className=\"deletable-item\" key={index}>\r\n                          <Text editable={{onChange: (val) => onEmailEdit(item, val)}} className=\"deletable-text\">\r\n                            {item.email}\r\n                          </Text>\r\n                          {selectedContact.emails.length > 1 ? (\r\n                            <Popconfirm\r\n                              placement=\"rightBottom\"\r\n                              title=\"Are you sure you want to remove this email address?\"\r\n                              onConfirm={() => onEmailDelete(item.id)}\r\n                              okText=\"Yes\"\r\n                              cancelText=\"No\"\r\n                            >\r\n                              <Button\r\n                                icon=\"delete\"\r\n                                type=\"danger\"\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                              />\r\n                            </Popconfirm>\r\n                          ) : null}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                    {isAddingEmail ? (\r\n                      <div className=\"custom-input-field\">\r\n                        <label>Email</label>\r\n                        <Row>\r\n                          <Col span={20}>\r\n                            <Input\r\n                              className=\"custom-input\"\r\n                              value={addEmail}\r\n                              name=\"email\"\r\n                              onChange={onEditInputChange}\r\n                            />\r\n                          </Col>\r\n                          <Button\r\n                            type=\"ghost\"\r\n                            icon=\"check\"\r\n                            style={{ float: \"right\" }}\r\n                            onClick={onEmailAdd}\r\n                            loading={addEmailAddrMutation.loading}\r\n                          />\r\n                        </Row>\r\n                        {addPhoneError ? (\r\n                          <Text type=\"danger\">\r\n                            <i>{addEmailError}</i>\r\n                          </Text>\r\n                        ) : null}\r\n                      </div>\r\n                    ) : null}\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          ) : (\r\n            <ContactForm />\r\n          )}\r\n        </div>\r\n        {selectedContact ? (\r\n          <Fab\r\n            icon=\"user-add\"\r\n            onClick={() => setContact(null)}\r\n            tooltipText=\"Add new contact\"\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return <div>{renderItems()}</div>;\r\n};\r\n\r\nexport default ContactArea;\r\n","import React from \"react\";\r\nimport { Contact } from \"../../models/interfaces\";\r\nimport SelectedContactContext from \"./selected-contact.contexts\";\r\n\r\nclass ContactContext extends React.Component {\r\n  state: {\r\n    selectedContact: Contact | null;\r\n    setContact: Function;\r\n  } = {\r\n    selectedContact: null,\r\n    setContact: (contact: Contact | null) => {\r\n      this.setState({ selectedContact: contact });\r\n    },\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <SelectedContactContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </SelectedContactContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactContext;\r\n","import React from \"react\";\r\nimport { Contact } from \"../../models/interfaces\";\r\nimport ContactsContext from \"./contacts.context\";\r\n\r\nclass ContactContext extends React.Component {\r\n  state: {\r\n    contacts: Contact[];\r\n    setContacts: Function;\r\n  } = {\r\n    contacts: [],\r\n    setContacts: (contacts: Contact[]) => {\r\n        this.setState({contacts})\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ContactsContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </ContactsContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactContext;\r\n","import React from \"react\";\r\nimport \"./landing-page.css\";\r\nimport { Card, Typography, Button } from \"antd\";\r\nimport { useAuth0 } from \"./../../react-auth0-spa\";\r\n\r\nconst { Paragraph, Title } = Typography;\r\n\r\nconst LandingPage = () => {\r\n  const {loginWithRedirect} = useAuth0();\r\n\r\n  return (\r\n    <div className=\"hero-main\">\r\n        <Card className=\"hero-content-card\">\r\n      <Title className=\"hero-title\">Happy Contacts</Title>\r\n      <Paragraph type=\"secondary\" className=\"subtitle\">\r\n        Manage all your contacts from one place, anywhere you are regardless of\r\n        your device\r\n      </Paragraph>\r\n      <Button type=\"primary\" size=\"large\" onClick={loginWithRedirect}>\r\n        Login\r\n      </Button>\r\n      <Button className=\"signup-button\" size=\"large\"  onClick={loginWithRedirect}>\r\n          Sign up\r\n      </Button>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Row, Col, Spin } from \"antd\";\r\nimport Sidebar from \"./components/sidebar/sidebar\";\r\nimport ContactArea from \"./components/contact-area/contact-area\";\r\nimport SelectedContactContext from \"./components/context/context-provider\";\r\nimport ContactsContext from \"./components/context/contacts-context-provider\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { useAuth0 } from \"./react-auth0-spa\";\r\nimport {setContext} from \"apollo-link-context\";\r\nimport LandingPage from \"./components/landing-page/landing-page\";\r\n\r\nfunction App() {\r\n  \r\n  const { isAuthenticated, loading, getIdTokenClaims } : any = useAuth0();\r\n  const [accessToken, setAccessToken] = useState(\"\");\r\n\r\n  if(loading){\r\n    return (<div className=\"fullscreen-loader\"><Spin size=\"large\"/></div>)\r\n  }\r\n\r\n  const getAccessToken = async () => {\r\n    try{\r\n      const token = await getIdTokenClaims();\r\n      setAccessToken(token.__raw);\r\n    }catch(e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  getAccessToken();\r\n\r\n\r\n  const cache = new InMemoryCache();\r\n  const link = new HttpLink({\r\n    uri: \"https://happy-contacts.herokuapp.com/v1/graphql\"\r\n  });\r\n\r\n  const authLink = setContext((_, {headers}) => {\r\n    const token = accessToken;\r\n    if(token){\r\n      return {\r\n        headers: {\r\n          ...headers,\r\n          authorization: `Bearer ${token}`\r\n        }\r\n      };\r\n    }else{\r\n      return {\r\n        headers : {\r\n          ...headers\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  const client = new ApolloClient({\r\n    cache,\r\n    link: authLink.concat(link)\r\n  });\r\n\r\n  if(!isAuthenticated){\r\n    return <LandingPage/>\r\n  }\r\n\r\n  return (\r\n        <ApolloProvider client={client}>\r\n          <ContactsContext>\r\n            <SelectedContactContext>\r\n              <div className=\"App\">\r\n                <Row>\r\n                  <Col span={6}>\r\n                    <Sidebar />\r\n                  </Col>\r\n                  <Col span={18}>\r\n                    <ContactArea />\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </SelectedContactContext>\r\n          </ContactsContext>\r\n        </ApolloProvider>\r\n      )\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Auth0Provider } from \"./react-auth0-spa\";\r\nimport auth0Config from './config.json';\r\n\r\nReactDOM.render(\r\n  <Auth0Provider\r\n    domain={auth0Config.auth0_domain}\r\n    client_id={auth0Config.auth0_client_id}\r\n    redirect_uri={window.location.href}\r\n  >\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}